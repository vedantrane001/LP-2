Bellman Ford -

#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    vector<int> bellmanFord(int V, vector<vector<int>>& edges, int src) {
        vector<int> dist(V, 1e8);
        dist[src] = 0;
        
        // Relax all edges V-1 times
        for (int i = 0; i < V - 1; i++) {
            for (auto it : edges) {
                int u = it[0];
                int v = it[1];
                int wt = it[2];
                
                if (dist[u] != 1e8 && dist[u] + wt < dist[v]) {
                    dist[v] = dist[u] + wt;
                }
            }
        }

        // Check for negative weight cycles
        for (auto it : edges) {
            int u = it[0];
            int v = it[1];
            int wt = it[2];
            
            if (dist[u] != 1e8 && dist[u] + wt < dist[v]) {
                return {-1}; // Negative weight cycle detected
            }
        }
        
        return dist;
    }
};

int main() {
    int V = 5; // Number of vertices
    int E = 6; // Number of edges

    // Edges: {u, v, weight}
    vector<vector<int>> edges = {
        {0, 1, 2},
        {0, 4, 1},
        {1, 2, 3},
        {2, 3, -6}, // Negative weight edge
        {4, 2, 2},
        {4, 3, 4}
    };

    int src = 0; // Source vertex

    Solution obj;
    vector<int> distances = obj.bellmanFord(V, edges, src);

    if (distances.size() == 1 && distances[0] == -1) {
        cout << "Negative weight cycle detected!" << endl;
    } else {
        cout << "Shortest distances from node " << src << ":" << endl;
        for (int i = 0; i < V; i++) {
            if (distances[i] == 1e8) {
                cout << "To node " << i << ": INF" << endl;
            } else {
                cout << "To node " << i << ": " << distances[i] << endl;
            }
        }
    }

    return 0;
}